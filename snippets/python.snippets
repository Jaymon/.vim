# https://github.com/honza/vim-snippets/blob/master/snippets/python.snippets
snippet #3
	# -*- coding: utf-8 -*-
	from __future__ import unicode_literals, division, print_function, absolute_import

snippet fullpath
	os.path.abspath(os.path.expanduser(str(${0:path})))

snippet walkpath
	for root_dir, dirs, files in os.walk(${0:path}, topdown=True):
		for basename in files:
			filepath = os.path.join(root_dir, basename)

snippet normpath
	path = os.path.abspath(os.path.expanduser(${0:path}))

snippet cacheproperty
	@property
	def ${1:name}(self):
		v = getattr(self, "_${2:name}", None)
		if v is None:
			self._${3:name} = 
		return self._${4:name}

snippet ld
	${1:var} = lambda ${2:vars} : ${0:action}

# make logging easier to instantiate
snippet logbasic
	import sys
	import logging
	logging.basicConfig(format="[%(levelname).1s] %(message)s", level=logging.DEBUG, stream=sys.stdout)
	logger = logging.getLogger(__name__)
snippet logadvanced
	import sys
	import logging
	logger = logging.getLogger()
	logger.setLevel(logging.DEBUG)
	log_handler = logging.StreamHandler(stream=sys.stderr)
	log_formatter = logging.Formatter('[%(levelname).1s] %(message)s')
	log_handler.setFormatter(log_formatter)
	logger.addHandler(log_handler)
snippet log
	logger = logging.getLogger(__name__)
snippet logd
	logger.debug("${0:errmsg}".format())
snippet logi
	logger.info("${0:errmsg}".format())
snippet logw
	logger.warn("${0:errmsg}".format(), sys_exc=True)
snippet loge
	logger.error("${0:errmsg}".format(), sys_exc=True)
snippet logx
	logger.exception(e)

snippet bs
	from bs4 import BeautifulSoup

snippet self.assertRegex
	self.assertRegexpMatches(val, regex)

